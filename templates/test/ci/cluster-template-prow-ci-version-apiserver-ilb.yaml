apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cloud-provider: ${CLOUD_PROVIDER_AZURE_LABEL:=azure}
    cni: calico
    metrics-server: enabled
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureCluster
    name: ${CLUSTER_NAME}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureCluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  additionalTags:
    buildProvenance: ${BUILD_PROVENANCE}
    creationTimestamp: ${TIMESTAMP}
    jobName: ${JOB_NAME}
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: ${CLUSTER_IDENTITY_NAME}
  location: ${AZURE_LOCATION}
  networkSpec:
    apiServerLB:
      frontendIPs:
      - name: ${CLUSTER_NAME}-api-lb
        publicIP:
          dnsName: ${CLUSTER_NAME}-${APISERVER_LB_DNS_SUFFIX}.${AZURE_LOCATION}.cloudapp.azure.com
          name: ${CLUSTER_NAME}-api-lb
      - name: ${CLUSTER_NAME}-internal-lb-private-ip
        privateIP: ${AZURE_INTERNAL_LB_PRIVATE_IP}
    subnets:
    - cidrBlocks:
      - ${AZURE_CP_SUBNET_CIDR}
      name: control-plane-subnet
      role: control-plane
    - cidrBlocks:
      - ${AZURE_NODE_SUBNET_CIDR}
      name: node-subnet
      role: node
    vnet:
      cidrBlocks:
      - ${AZURE_VNET_CIDR}
      name: ${AZURE_VNET_NAME:=${CLUSTER_NAME}-vnet}
  resourceGroup: ${AZURE_RESOURCE_GROUP:=${CLUSTER_NAME}}
  subscriptionID: ${AZURE_SUBSCRIPTION_ID}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs: {}
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "false"
          cloud-provider: external
          cluster-name: ${CLUSTER_NAME}
          v: "4"
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            quota-backend-bytes: "8589934592"
    diskSetup:
      filesystems:
      - device: /dev/disk/azure/scsi1/lun0
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: etcd_disk
      - device: ephemeral0.1
        filesystem: ext4
        label: ephemeral0
        replaceFS: ntfs
      partitions:
      - device: /dev/disk/azure/scsi1/lun0
        layout: true
        overwrite: false
        tableType: gpt
    files:
    - content:
        content: "#!/bin/bash\n\nset -o nounset\nset -o pipefail\nset -o errexit\n[[
          $(id -u) != 0 ]] && SUDO=\"sudo\" || SUDO=\"\"\n\n# This test installs release
          packages or binaries that are a result of the CI and release builds.\n#
          It runs '... --version' commands to verify that the binaries are correctly
          installed\n# and finally uninstalls the packages.\n# For the release packages
          it tests all versions in the support skew.\nLINE_SEPARATOR=\"*************************************************\"\necho
          \"$$LINE_SEPARATOR\"\nCI_VERSION=${CI_VERSION}\nif [[ \"$${CI_VERSION}\"
          != \"\" ]]; then\n  CI_DIR=/tmp/k8s-ci\n  mkdir -p $$CI_DIR\n  declare -a
          PACKAGES_TO_TEST=(\"kubectl\" \"kubelet\" \"kubeadm\")\n  declare -a CONTAINERS_TO_TEST=(\"kube-apiserver\"
          \"kube-controller-manager\" \"kube-proxy\" \"kube-scheduler\")\n  CONTAINER_EXT=\"tar\"\n
          \ echo \"* testing CI version $$CI_VERSION\"\n  \n  # Add custom image handling\n
          \ if [[ -n \"${KUBE_APISERVER_IMAGE:-}\" ]] && [[ -n \"${KUBE_CONTROLLER_MANAGER_IMAGE:-}\"
          ]] && [[ -n \"${KUBE_SCHEDULER_IMAGE:-}\" ]] && [[ -n \"${KUBE_PROXY_IMAGE:-}\"
          ]]; then\n    echo \"* Using custom Kubernetes images\"\n    \n    # Pull
          and tag custom images\n    echo \"* Pulling kube-apiserver: ${KUBE_APISERVER_IMAGE}\"\n
          \   $${SUDO} ctr -n k8s.io images pull \"${KUBE_APISERVER_IMAGE}\"\n    $${SUDO}
          ctr -n k8s.io images tag \"${KUBE_APISERVER_IMAGE}\" \"registry.k8s.io/kube-apiserver:$${CI_VERSION//+/_}\"\n
          \   \n    echo \"* Pulling kube-controller-manager: ${KUBE_CONTROLLER_MANAGER_IMAGE}\"\n
          \   $${SUDO} ctr -n k8s.io images pull \"${KUBE_CONTROLLER_MANAGER_IMAGE}\"\n
          \   $${SUDO} ctr -n k8s.io images tag \"${KUBE_CONTROLLER_MANAGER_IMAGE}\"
          \"registry.k8s.io/kube-controller-manager:$${CI_VERSION//+/_}\"\n    \n
          \   echo \"* Pulling kube-scheduler: ${KUBE_SCHEDULER_IMAGE}\"\n    $${SUDO}
          ctr -n k8s.io images pull \"${KUBE_SCHEDULER_IMAGE}\"\n    $${SUDO} ctr
          -n k8s.io images tag \"${KUBE_SCHEDULER_IMAGE}\" \"registry.k8s.io/kube-scheduler:$${CI_VERSION//+/_}\"\n
          \   \n    echo \"* Pulling kube-proxy: ${KUBE_PROXY_IMAGE}\"\n    $${SUDO}
          ctr -n k8s.io images pull \"${KUBE_PROXY_IMAGE}\"\n    $${SUDO} ctr -n k8s.io
          images tag \"${KUBE_PROXY_IMAGE}\" \"registry.k8s.io/kube-proxy:$${CI_VERSION//+/_}\"\n
          \   \n    # Still need to install the binaries for kubectl, kubelet, kubeadm\n
          \   CI_URL=\"https://storage.googleapis.com/k8s-release-dev/ci/$${CI_VERSION}/bin/linux/amd64\"\n
          \   for CI_PACKAGE in \"$${PACKAGES_TO_TEST[@]}\"; do\n      echo \"* downloading
          binary: $$CI_URL/$$CI_PACKAGE\"\n      wget --inet4-only \"$$CI_URL/$$CI_PACKAGE\"
          -nv -O \"$$CI_DIR/$$CI_PACKAGE\"\n      chmod +x \"$$CI_DIR/$$CI_PACKAGE\"\n
          \     mv \"$$CI_DIR/$$CI_PACKAGE\" \"/usr/bin/$$CI_PACKAGE\"\n    done\n
          \ # Check for semver\n  elif [[ \"$${CI_VERSION}\" =~ ^v[0-9]+\\.[0-9]+\\.[0-9]+$
          ]]; then\n    VERSION_WITHOUT_PREFIX=\"${CI_VERSION#v}\"\n    DEBIAN_FRONTEND=noninteractive
          apt-get install -y apt-transport-https curl\n    curl -fsSL https://pkgs.k8s.io/core:/stable:/${KUBERNETES_VERSION}/deb/Release.key
          | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n    echo
          \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/${KUBERNETES_VERSION}/deb/
          /\" | tee /etc/apt/sources.list.d/kubernetes.list\n    apt-get update\n
          \   # replace . with \\.\n    VERSION_REGEX=\"${VERSION_WITHOUT_PREFIX//./\\\\.}\"\n
          \   PACKAGE_VERSION=\"$(apt-cache madison kubelet|grep $${VERSION_REGEX}-
          | head -n1 | cut -d '|' -f 2 | tr -d '[:space:]')\"\n    for CI_PACKAGE
          in \"$${PACKAGES_TO_TEST[@]}\"; do\n      echo \"* installing package: $$CI_PACKAGE
          $${PACKAGE_VERSION}\"\n      DEBIAN_FRONTEND=noninteractive apt-get install
          -y $$CI_PACKAGE=$$PACKAGE_VERSION\n    done\n  else\n    CI_URL=\"https://storage.googleapis.com/k8s-release-dev/ci/$${CI_VERSION}/bin/linux/amd64\"\n
          \   for CI_PACKAGE in \"$${PACKAGES_TO_TEST[@]}\"; do\n      echo \"* downloading
          binary: $$CI_URL/$$CI_PACKAGE\"\n      wget --inet4-only \"$$CI_URL/$$CI_PACKAGE\"
          -nv -O \"$$CI_DIR/$$CI_PACKAGE\"\n      chmod +x \"$$CI_DIR/$$CI_PACKAGE\"\n
          \     mv \"$$CI_DIR/$$CI_PACKAGE\" \"/usr/bin/$$CI_PACKAGE\"\n    done\n
          \   IMAGE_REGISTRY_PREFIX=registry.k8s.io\n    for CI_CONTAINER in \"$${CONTAINERS_TO_TEST[@]}\";
          do\n      echo \"* downloading package: $$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT\"\n
          \     wget --inet4-only \"$$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT\" -nv
          -O \"$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT\"\n      $${SUDO} ctr -n k8s.io
          images import \"$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT\" || echo \"* ignoring
          expected 'ctr images import' result\"\n      $${SUDO} ctr -n k8s.io images
          tag $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER-amd64:\"$${CI_VERSION//+/_}\"
          $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER:\"$${CI_VERSION//+/_}\"\n      $${SUDO}
          ctr -n k8s.io images tag $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER-amd64:\"$${CI_VERSION//+/_}\"
          gcr.io/k8s-staging-ci-images/$$CI_CONTAINER:\"$${CI_VERSION//+/_}\"\n    done\n
          \ fi\n  systemctl restart kubelet\nfi\necho \"* checking binary versions\"\necho
          \"ctr version: \" $(ctr version)\necho \"kubeadm version: \" $(kubeadm version
          -o=short)\necho \"kubectl version: \" $(kubectl version --client=true)\necho
          \"kubelet version: \" $(kubelet --version)\necho \"$$LINE_SEPARATOR\"\n"
        owner: root:root
        path: /tmp/kubeadm-bootstrap.sh
        permissions: "0744"
      contentFrom:
        secret:
          key: control-plane-azure.json
          name: ${CLUSTER_NAME}-control-plane-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
    - content: |
        #!/bin/bash

        set -o nounset
        set -o pipefail
        set -o errexit
        [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""

        # Run the az login command with managed identity
        if az login --identity > /dev/null 2>&1; then
          echo "Logged in Azure with managed identity"
          echo "Use OOT credential provider"
          mkdir -p /var/lib/kubelet/credential-provider
          az storage blob download --blob-url "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_BLOB_CONTAINER_NAME}/${IMAGE_TAG_ACR_CREDENTIAL_PROVIDER}/azure-acr-credential-provider" -f /var/lib/kubelet/credential-provider/acr-credential-provider --auth-mode login
          chmod 755 /var/lib/kubelet/credential-provider/acr-credential-provider
          az storage blob download --blob-url "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_BLOB_CONTAINER_NAME}/${IMAGE_TAG_ACR_CREDENTIAL_PROVIDER}/credential-provider-config.yaml" -f /var/lib/kubelet/credential-provider-config.yaml --auth-mode login
          chmod 644 /var/lib/kubelet/credential-provider-config.yaml
        else
          echo "Using curl to download the OOT credential provider"
          mkdir -p /var/lib/kubelet/credential-provider
          curl --retry 10 --retry-delay 5 -w "response status code is %{http_code}" -Lo /var/lib/kubelet/credential-provider/acr-credential-provider "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_BLOB_CONTAINER_NAME}/${IMAGE_TAG_ACR_CREDENTIAL_PROVIDER}/azure-acr-credential-provider"
          chmod 755 /var/lib/kubelet/credential-provider/acr-credential-provider
          curl --retry 10 --retry-delay 5 -w "response status code is %{http_code}" -Lo /var/lib/kubelet/credential-provider-config.yaml "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_BLOB_CONTAINER_NAME}/${IMAGE_TAG_ACR_CREDENTIAL_PROVIDER}/credential-provider-config.yaml"
          chmod 644 /var/lib/kubelet/credential-provider-config.yaml
        fi
      owner: root:root
      path: /tmp/oot-cred-provider.sh
      permissions: "0744"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          image-credential-provider-bin-dir: /var/lib/kubelet/credential-provider
          image-credential-provider-config: /var/lib/kubelet/credential-provider-config.yaml
        name: '{{ ds.meta_data["local_hostname"] }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          image-credential-provider-bin-dir: /var/lib/kubelet/credential-provider
          image-credential-provider-config: /var/lib/kubelet/credential-provider-config.yaml
        name: '{{ ds.meta_data["local_hostname"] }}'
    mounts:
    - - LABEL=etcd_disk
      - /var/lib/etcddisk
    postKubeadmCommands: []
    preKubeadmCommands:
    - bash -c /tmp/oot-cred-provider.sh
    verbosity: 10
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: ${CLUSTER_NAME}-control-plane
  replicas: ${CONTROL_PLANE_MACHINE_COUNT:=1}
  version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  template:
    spec:
      dataDisks:
      - diskSizeGB: 256
        lun: 0
        nameSuffix: etcddisk
      identity: UserAssigned
      image:
        marketplace:
          offer: capi
          publisher: cncf-upstream
          sku: ubuntu-2204-gen1
          version: latest
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      userAssignedIdentities:
      - providerID: /subscriptions/${AZURE_SUBSCRIPTION_ID}/resourceGroups/${CI_RG:=capz-ci}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${USER_IDENTITY:=cloud-provider-user-identity}
      vmSize: ${AZURE_CONTROL_PLANE_MACHINE_TYPE}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WORKER_MACHINE_COUNT:=2}
  selector:
    matchLabels: null
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: ${CLUSTER_NAME}-md-0
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        name: ${CLUSTER_NAME}-md-0
      version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  template:
    spec:
      identity: UserAssigned
      image:
        marketplace:
          offer: capi
          publisher: cncf-upstream
          sku: ubuntu-2204-gen1
          version: latest
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      userAssignedIdentities:
      - providerID: /subscriptions/${AZURE_SUBSCRIPTION_ID}/resourceGroups/${CI_RG:=capz-ci}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${USER_IDENTITY:=cloud-provider-user-identity}
      vmSize: ${AZURE_NODE_MACHINE_TYPE}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  template:
    spec:
      files:
      - content:
        - content: "#!/bin/bash\n\nset -o nounset\nset -o pipefail\nset -o errexit\n[[
            $(id -u) != 0 ]] && SUDO=\"sudo\" || SUDO=\"\"\n\n# This test installs
            release packages or binaries that are a result of the CI and release builds.\n#
            It runs '... --version' commands to verify that the binaries are correctly
            installed\n# and finally uninstalls the packages.\n# For the release packages
            it tests all versions in the support skew.\nLINE_SEPARATOR=\"*************************************************\"\necho
            \"$$LINE_SEPARATOR\"\nCI_VERSION=${CI_VERSION}\nif [[ \"$${CI_VERSION}\"
            != \"\" ]]; then\n  CI_DIR=/tmp/k8s-ci\n  mkdir -p $$CI_DIR\n  declare
            -a PACKAGES_TO_TEST=(\"kubectl\" \"kubelet\" \"kubeadm\")\n  declare -a
            CONTAINERS_TO_TEST=(\"kube-apiserver\" \"kube-controller-manager\" \"kube-proxy\"
            \"kube-scheduler\")\n  CONTAINER_EXT=\"tar\"\n  echo \"* testing CI version
            $$CI_VERSION\"\n  \n  # Add custom image handling\n  if [[ -n \"${KUBE_APISERVER_IMAGE:-}\"
            ]] && [[ -n \"${KUBE_CONTROLLER_MANAGER_IMAGE:-}\" ]] && [[ -n \"${KUBE_SCHEDULER_IMAGE:-}\"
            ]] && [[ -n \"${KUBE_PROXY_IMAGE:-}\" ]]; then\n    echo \"* Using custom
            Kubernetes images\"\n    \n    # Pull and tag custom images\n    echo
            \"* Pulling kube-apiserver: ${KUBE_APISERVER_IMAGE}\"\n    $${SUDO} ctr
            -n k8s.io images pull \"${KUBE_APISERVER_IMAGE}\"\n    $${SUDO} ctr -n
            k8s.io images tag \"${KUBE_APISERVER_IMAGE}\" \"registry.k8s.io/kube-apiserver:$${CI_VERSION//+/_}\"\n
            \   \n    echo \"* Pulling kube-controller-manager: ${KUBE_CONTROLLER_MANAGER_IMAGE}\"\n
            \   $${SUDO} ctr -n k8s.io images pull \"${KUBE_CONTROLLER_MANAGER_IMAGE}\"\n
            \   $${SUDO} ctr -n k8s.io images tag \"${KUBE_CONTROLLER_MANAGER_IMAGE}\"
            \"registry.k8s.io/kube-controller-manager:$${CI_VERSION//+/_}\"\n    \n
            \   echo \"* Pulling kube-scheduler: ${KUBE_SCHEDULER_IMAGE}\"\n    $${SUDO}
            ctr -n k8s.io images pull \"${KUBE_SCHEDULER_IMAGE}\"\n    $${SUDO} ctr
            -n k8s.io images tag \"${KUBE_SCHEDULER_IMAGE}\" \"registry.k8s.io/kube-scheduler:$${CI_VERSION//+/_}\"\n
            \   \n    echo \"* Pulling kube-proxy: ${KUBE_PROXY_IMAGE}\"\n    $${SUDO}
            ctr -n k8s.io images pull \"${KUBE_PROXY_IMAGE}\"\n    $${SUDO} ctr -n
            k8s.io images tag \"${KUBE_PROXY_IMAGE}\" \"registry.k8s.io/kube-proxy:$${CI_VERSION//+/_}\"\n
            \   \n    # Still need to install the binaries for kubectl, kubelet, kubeadm\n
            \   CI_URL=\"https://storage.googleapis.com/k8s-release-dev/ci/$${CI_VERSION}/bin/linux/amd64\"\n
            \   for CI_PACKAGE in \"$${PACKAGES_TO_TEST[@]}\"; do\n      echo \"*
            downloading binary: $$CI_URL/$$CI_PACKAGE\"\n      wget --inet4-only \"$$CI_URL/$$CI_PACKAGE\"
            -nv -O \"$$CI_DIR/$$CI_PACKAGE\"\n      chmod +x \"$$CI_DIR/$$CI_PACKAGE\"\n
            \     mv \"$$CI_DIR/$$CI_PACKAGE\" \"/usr/bin/$$CI_PACKAGE\"\n    done\n
            \ # Check for semver\n  elif [[ \"$${CI_VERSION}\" =~ ^v[0-9]+\\.[0-9]+\\.[0-9]+$
            ]]; then\n    VERSION_WITHOUT_PREFIX=\"${CI_VERSION#v}\"\n    DEBIAN_FRONTEND=noninteractive
            apt-get install -y apt-transport-https curl\n    curl -fsSL https://pkgs.k8s.io/core:/stable:/${KUBERNETES_VERSION}/deb/Release.key
            | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n    echo
            \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/${KUBERNETES_VERSION}/deb/
            /\" | tee /etc/apt/sources.list.d/kubernetes.list\n    apt-get update\n
            \   # replace . with \\.\n    VERSION_REGEX=\"${VERSION_WITHOUT_PREFIX//./\\\\.}\"\n
            \   PACKAGE_VERSION=\"$(apt-cache madison kubelet|grep $${VERSION_REGEX}-
            | head -n1 | cut -d '|' -f 2 | tr -d '[:space:]')\"\n    for CI_PACKAGE
            in \"$${PACKAGES_TO_TEST[@]}\"; do\n      echo \"* installing package:
            $$CI_PACKAGE $${PACKAGE_VERSION}\"\n      DEBIAN_FRONTEND=noninteractive
            apt-get install -y $$CI_PACKAGE=$$PACKAGE_VERSION\n    done\n  else\n
            \   CI_URL=\"https://storage.googleapis.com/k8s-release-dev/ci/$${CI_VERSION}/bin/linux/amd64\"\n
            \   for CI_PACKAGE in \"$${PACKAGES_TO_TEST[@]}\"; do\n      echo \"*
            downloading binary: $$CI_URL/$$CI_PACKAGE\"\n      wget --inet4-only \"$$CI_URL/$$CI_PACKAGE\"
            -nv -O \"$$CI_DIR/$$CI_PACKAGE\"\n      chmod +x \"$$CI_DIR/$$CI_PACKAGE\"\n
            \     mv \"$$CI_DIR/$$CI_PACKAGE\" \"/usr/bin/$$CI_PACKAGE\"\n    done\n
            \   IMAGE_REGISTRY_PREFIX=registry.k8s.io\n    for CI_CONTAINER in \"$${CONTAINERS_TO_TEST[@]}\";
            do\n      echo \"* downloading package: $$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT\"\n
            \     wget --inet4-only \"$$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT\" -nv
            -O \"$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT\"\n      $${SUDO} ctr -n
            k8s.io images import \"$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT\" || echo
            \"* ignoring expected 'ctr images import' result\"\n      $${SUDO} ctr
            -n k8s.io images tag $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER-amd64:\"$${CI_VERSION//+/_}\"
            $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER:\"$${CI_VERSION//+/_}\"\n      $${SUDO}
            ctr -n k8s.io images tag $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER-amd64:\"$${CI_VERSION//+/_}\"
            gcr.io/k8s-staging-ci-images/$$CI_CONTAINER:\"$${CI_VERSION//+/_}\"\n
            \   done\n  fi\n  systemctl restart kubelet\nfi\necho \"* checking binary
            versions\"\necho \"ctr version: \" $(ctr version)\necho \"kubeadm version:
            \" $(kubeadm version -o=short)\necho \"kubectl version: \" $(kubectl version
            --client=true)\necho \"kubelet version: \" $(kubelet --version)\necho
            \"$$LINE_SEPARATOR\"\n"
          owner: root:root
          path: /tmp/kubeadm-bootstrap.sh
          permissions: "0744"
        contentFrom:
          secret:
            key: worker-node-azure.json
            name: ${CLUSTER_NAME}-md-0-azure-json
        owner: root:root
        path: /etc/kubernetes/azure.json
        permissions: "0644"
      - content: |
          #!/bin/bash

          set -o nounset
          set -o pipefail
          set -o errexit
          [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""

          # Run the az login command with managed identity
          if az login --identity > /dev/null 2>&1; then
            echo "Logged in Azure with managed identity"
            echo "Use OOT credential provider"
            mkdir -p /var/lib/kubelet/credential-provider
            az storage blob download --blob-url "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_BLOB_CONTAINER_NAME}/${IMAGE_TAG_ACR_CREDENTIAL_PROVIDER}/azure-acr-credential-provider" -f /var/lib/kubelet/credential-provider/acr-credential-provider --auth-mode login
            chmod 755 /var/lib/kubelet/credential-provider/acr-credential-provider
            az storage blob download --blob-url "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_BLOB_CONTAINER_NAME}/${IMAGE_TAG_ACR_CREDENTIAL_PROVIDER}/credential-provider-config.yaml" -f /var/lib/kubelet/credential-provider-config.yaml --auth-mode login
            chmod 644 /var/lib/kubelet/credential-provider-config.yaml
          else
            echo "Use OOT credential provider"
            mkdir -p /var/lib/kubelet/credential-provider
            curl --retry 10 --retry-delay 5 -w "response status code is %{http_code}" -Lo /var/lib/kubelet/credential-provider/acr-credential-provider "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_BLOB_CONTAINER_NAME}/${IMAGE_TAG_ACR_CREDENTIAL_PROVIDER}/azure-acr-credential-provider"
            chmod 755 /var/lib/kubelet/credential-provider/acr-credential-provider
            curl --retry 10 --retry-delay 5 -w "response status code is %{http_code}" -Lo /var/lib/kubelet/credential-provider-config.yaml "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_BLOB_CONTAINER_NAME}/${IMAGE_TAG_ACR_CREDENTIAL_PROVIDER}/credential-provider-config.yaml"
            chmod 644 /var/lib/kubelet/credential-provider-config.yaml
          fi
        owner: root:root
        path: /tmp/oot-cred-provider.sh
        permissions: "0744"
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: external
            image-credential-provider-bin-dir: /var/lib/kubelet/credential-provider
            image-credential-provider-config: /var/lib/kubelet/credential-provider-config.yaml
          name: '{{ ds.meta_data["local_hostname"] }}'
      preKubeadmCommands:
      - echo '${AZURE_INTERNAL_LB_PRIVATE_IP}   ${CLUSTER_NAME}-${APISERVER_LB_DNS_SUFFIX}.${AZURE_LOCATION}.cloudapp.azure.com'
        >> /etc/hosts
      - bash -c /tmp/oot-cred-provider.sh
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: "true"
  name: ${CLUSTER_IDENTITY_NAME}
  namespace: default
spec:
  allowedNamespaces: {}
  clientID: ${AZURE_CLIENT_ID_USER_ASSIGNED_IDENTITY}
  tenantID: ${AZURE_TENANT_ID}
  type: ${CLUSTER_IDENTITY_TYPE:=WorkloadIdentity}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineHealthCheck
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  clusterName: ${CLUSTER_NAME}
  maxUnhealthy: 100%
  selector:
    matchLabels:
      cluster.x-k8s.io/control-plane: ""
  unhealthyConditions:
  - status: Unknown
    timeout: 300s
    type: Ready
  - status: "False"
    timeout: 300s
    type: Ready
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: metrics-server-${CLUSTER_NAME}
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      metrics-server: enabled
  resources:
  - kind: ConfigMap
    name: metrics-server-${CLUSTER_NAME}
  strategy: ApplyOnce
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: calico
  namespace: default
spec:
  chartName: tigera-operator
  clusterSelector:
    matchLabels:
      cni: calico
  namespace: tigera-operator
  releaseName: projectcalico
  repoURL: https://docs.tigera.io/calico/charts
  valuesTemplate: |
    installation:
      cni:
        type: Calico
        ipam:
          type: Calico
      calicoNetwork:
        bgp: Disabled
        mtu: 1350
        ipPools:
        ipPools:{{range $i, $cidr := .Cluster.spec.clusterNetwork.pods.cidrBlocks }}
        - cidr: {{ $cidr }}
          encapsulation: VXLAN{{end}}
      registry: mcr.microsoft.com/oss
    # Image and registry configuration for the tigera/operator pod.
    tigeraOperator:
      image: tigera/operator
      registry: mcr.microsoft.com/oss
    calicoctl:
      image: mcr.microsoft.com/oss/calico/ctl
    # By default, tigera tolerates all NoSchedule taints. This breaks upgrades
    # when it continuously gets scheduled onto an out-of-date Node that is being
    # deleted. Tolerate only the NoSchedule taints that are expected.
    tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
      - effect: NoSchedule
        key: node.kubernetes.io/not-ready
        operator: Exists
  version: ${CALICO_VERSION}
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: azuredisk-csi-driver-chart
  namespace: default
spec:
  chartName: azuredisk-csi-driver
  clusterSelector:
    matchLabels:
      azuredisk-csi: "true"
  namespace: kube-system
  releaseName: azuredisk-csi-driver-oot
  repoURL: https://raw.githubusercontent.com/kubernetes-sigs/azuredisk-csi-driver/master/charts
  valuesTemplate: |-
    controller:
      replicas: 1
      runOnControlPlane: true
    windows:
      useHostProcessContainers: {{ hasKey .Cluster.metadata.labels "cni-windows" }}
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: cloud-provider-azure-chart
  namespace: default
spec:
  chartName: cloud-provider-azure
  clusterSelector:
    matchLabels:
      cloud-provider: azure
  releaseName: cloud-provider-azure-oot
  repoURL: https://raw.githubusercontent.com/kubernetes-sigs/cloud-provider-azure/master/helm/repo
  valuesTemplate: |
    infra:
      clusterName: {{ .Cluster.metadata.name }}
    cloudControllerManager:
      clusterCIDR: {{ .Cluster.spec.clusterNetwork.pods.cidrBlocks | join "," }}
      logVerbosity: 4
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: cloud-provider-azure-chart-ci
  namespace: default
spec:
  chartName: cloud-provider-azure
  clusterSelector:
    matchLabels:
      cloud-provider: azure-ci
  releaseName: cloud-provider-azure-oot
  repoURL: https://raw.githubusercontent.com/kubernetes-sigs/cloud-provider-azure/master/helm/repo
  valuesTemplate: |
    infra:
      clusterName: {{ .Cluster.metadata.name }}
    cloudControllerManager:
      cloudConfig: ${CLOUD_CONFIG:-"/etc/kubernetes/azure.json"}
      cloudConfigSecretName: ${CONFIG_SECRET_NAME:-""}
      clusterCIDR: {{ .Cluster.spec.clusterNetwork.pods.cidrBlocks | join "," }}
      imageName: "${CCM_IMAGE_NAME:-""}"
      imageRepository: "${IMAGE_REGISTRY:-""}"
      imageTag: "${IMAGE_TAG_CCM:-""}"
      logVerbosity: ${CCM_LOG_VERBOSITY:-4}
      replicas: ${CCM_COUNT:-1}
      enableDynamicReloading: ${ENABLE_DYNAMIC_RELOADING:-false}
    cloudNodeManager:
      imageName: "${CNM_IMAGE_NAME:-""}"
      imageRepository: "${IMAGE_REGISTRY:-""}"
      imageTag: "${IMAGE_TAG_CNM:-""}"
---
apiVersion: v1
data:
  metrics-server: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        k8s-app: metrics-server
      name: metrics-server
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        k8s-app: metrics-server
        rbac.authorization.k8s.io/aggregate-to-admin: "true"
        rbac.authorization.k8s.io/aggregate-to-edit: "true"
        rbac.authorization.k8s.io/aggregate-to-view: "true"
      name: system:aggregated-metrics-reader
    rules:
    - apiGroups:
      - metrics.k8s.io
      resources:
      - pods
      - nodes
      verbs:
      - get
      - list
      - watch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        k8s-app: metrics-server
      name: system:metrics-server
    rules:
    - apiGroups:
      - ""
      resources:
      - nodes/metrics
      verbs:
      - get
    - apiGroups:
      - ""
      resources:
      - pods
      - nodes
      verbs:
      - get
      - list
      - watch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      labels:
        k8s-app: metrics-server
      name: metrics-server-auth-reader
      namespace: kube-system
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: extension-apiserver-authentication-reader
    subjects:
    - kind: ServiceAccount
      name: metrics-server
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        k8s-app: metrics-server
      name: metrics-server:system:auth-delegator
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:auth-delegator
    subjects:
    - kind: ServiceAccount
      name: metrics-server
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        k8s-app: metrics-server
      name: system:metrics-server
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:metrics-server
    subjects:
    - kind: ServiceAccount
      name: metrics-server
      namespace: kube-system
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        k8s-app: metrics-server
      name: metrics-server
      namespace: kube-system
    spec:
      ports:
      - name: https
        port: 443
        protocol: TCP
        targetPort: https
      selector:
        k8s-app: metrics-server
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        k8s-app: metrics-server
      name: metrics-server
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          k8s-app: metrics-server
      strategy:
        rollingUpdate:
          maxUnavailable: 0
      template:
        metadata:
          labels:
            k8s-app: metrics-server
        spec:
          containers:
          - args:
            - --cert-dir=/tmp
            - --secure-port=4443
            - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
            - --kubelet-use-node-status-port
            - --metric-resolution=15s
            - --kubelet-insecure-tls
            image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /livez
                port: https
                scheme: HTTPS
              periodSeconds: 10
            name: metrics-server
            ports:
            - containerPort: 4443
              name: https
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /readyz
                port: https
                scheme: HTTPS
              initialDelaySeconds: 20
              periodSeconds: 10
            resources:
              requests:
                cpu: 100m
                memory: 200Mi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 1000
            volumeMounts:
            - mountPath: /tmp
              name: tmp-dir
          nodeSelector:
            kubernetes.io/os: linux
          priorityClassName: system-cluster-critical
          serviceAccountName: metrics-server
          tolerations:
          - effect: NoSchedule
            key: node-role.kubernetes.io/master
            operator: Exists
          - effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Exists
          volumes:
          - emptyDir: {}
            name: tmp-dir
    ---
    apiVersion: apiregistration.k8s.io/v1
    kind: APIService
    metadata:
      labels:
        k8s-app: metrics-server
      name: v1beta1.metrics.k8s.io
    spec:
      group: metrics.k8s.io
      groupPriorityMinimum: 100
      insecureSkipTLSVerify: true
      service:
        name: metrics-server
        namespace: kube-system
      version: v1beta1
      versionPriority: 100
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: metrics-server-${CLUSTER_NAME}
  namespace: default

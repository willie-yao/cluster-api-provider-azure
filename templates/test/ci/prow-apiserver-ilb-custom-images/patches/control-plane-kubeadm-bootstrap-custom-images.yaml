- op: add
  path: /spec/kubeadmConfigSpec/files/-
  value:
    content: |
      #!/bin/bash

      set -o nounset
      set -o pipefail
      set -o errexit
      [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""

      LINE_SEPARATOR="*************************************************"
      echo "$$LINE_SEPARATOR"

      # Custom image handling
      if [[ -n "${KUBE_APISERVER_IMAGE:-}" ]]; then
        echo "* Using custom kube-apiserver image: ${KUBE_APISERVER_IMAGE}"
        # Remove existing image if present
        echo "* Removing existing kube-apiserver image if present"
        $${SUDO} ctr -n k8s.io images rm "registry.k8s.io/kube-apiserver:${KUBERNETES_VERSION}" 2>/dev/null || true
        echo "* Pulling kube-apiserver: ${KUBE_APISERVER_IMAGE}"
        $${SUDO} ctr -n k8s.io images pull "${KUBE_APISERVER_IMAGE}"
        echo "* Tagging kube-apiserver: ${KUBE_APISERVER_IMAGE} as registry.k8s.io/kube-apiserver:${KUBERNETES_VERSION}"
        $${SUDO} ctr -n k8s.io images tag "${KUBE_APISERVER_IMAGE}" "registry.k8s.io/kube-apiserver:${KUBERNETES_VERSION}"
      else
        echo "* Custom kube-apiserver image environment variable not set, using default"
      fi

      if [[ -n "${KUBE_CONTROLLER_MANAGER_IMAGE:-}" ]]; then
        echo "* Using custom kube-controller-manager image: ${KUBE_CONTROLLER_MANAGER_IMAGE}"
        # Remove existing image if present
        echo "* Removing existing kube-controller-manager image if present"
        $${SUDO} ctr -n k8s.io images rm "registry.k8s.io/kube-controller-manager:${KUBERNETES_VERSION}" 2>/dev/null || true
        echo "* Pulling kube-controller-manager: ${KUBE_CONTROLLER_MANAGER_IMAGE}"
        $${SUDO} ctr -n k8s.io images pull "${KUBE_CONTROLLER_MANAGER_IMAGE}"
        echo "* Tagging kube-controller-manager: ${KUBE_CONTROLLER_MANAGER_IMAGE} as registry.k8s.io/kube-controller-manager:${KUBERNETES_VERSION}"
        $${SUDO} ctr -n k8s.io images tag "${KUBE_CONTROLLER_MANAGER_IMAGE}" "registry.k8s.io/kube-controller-manager:${KUBERNETES_VERSION}"
      else
        echo "* Custom kube-controller-manager image environment variable not set, using default"
      fi

      if [[ -n "${KUBE_SCHEDULER_IMAGE:-}" ]]; then
        echo "* Using custom kube-scheduler image: ${KUBE_SCHEDULER_IMAGE}"
        # Remove existing image if present
        echo "* Removing existing kube-scheduler image if present"
        $${SUDO} ctr -n k8s.io images rm "registry.k8s.io/kube-scheduler:${KUBERNETES_VERSION}" 2>/dev/null || true
        echo "* Pulling kube-scheduler: ${KUBE_SCHEDULER_IMAGE}"
        $${SUDO} ctr -n k8s.io images pull "${KUBE_SCHEDULER_IMAGE}"
        echo "* Tagging kube-scheduler: ${KUBE_SCHEDULER_IMAGE} as registry.k8s.io/kube-scheduler:${KUBERNETES_VERSION}"
        $${SUDO} ctr -n k8s.io images tag "${KUBE_SCHEDULER_IMAGE}" "registry.k8s.io/kube-scheduler:${KUBERNETES_VERSION}"
      else
        echo "* Custom kube-scheduler image environment variable not set, using default"
      fi

      if [[ -n "${KUBE_PROXY_IMAGE:-}" ]]; then
        echo "* Using custom kube-proxy image: ${KUBE_PROXY_IMAGE}"
        # Remove existing image if present
        echo "* Removing existing kube-proxy image if present"
        $${SUDO} ctr -n k8s.io images rm "registry.k8s.io/kube-proxy:${KUBERNETES_VERSION}" 2>/dev/null || true
        echo "* Pulling kube-proxy: ${KUBE_PROXY_IMAGE}"
        $${SUDO} ctr -n k8s.io images pull "${KUBE_PROXY_IMAGE}"
        echo "* Tagging kube-proxy: ${KUBE_PROXY_IMAGE} as registry.k8s.io/kube-proxy:${KUBERNETES_VERSION}"
        $${SUDO} ctr -n k8s.io images tag "${KUBE_PROXY_IMAGE}" "registry.k8s.io/kube-proxy:${KUBERNETES_VERSION}"
      else
        echo "* Custom kube-proxy image environment variable not set, using default"
      fi

      echo "* checking binary versions"
      echo "ctr version: " $(ctr version)
      echo "kubeadm version: " $(kubeadm version -o=short)
      echo "kubectl version: " $(kubectl version --client=true)
      echo "kubelet version: " $(kubelet --version)
      echo "$$LINE_SEPARATOR"
    path: /tmp/kubeadm-bootstrap.sh
    owner: "root:root"
    permissions: "0744"
- op: add
  path: /spec/kubeadmConfigSpec/preKubeadmCommands/-
  value:
    bash -c /tmp/kubeadm-bootstrap.sh
- op: add
  path: /spec/kubeadmConfigSpec/verbosity
  value: 5

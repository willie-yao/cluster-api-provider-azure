- op: add
  path: /spec/template/spec/files/-
  value:
    content: |
      #!/bin/bash
      set -o nounset
      set -o pipefail
      set -o errexit
      systemctl stop kubelet
      declare -a BINARIES=("kubeadm" "kubectl" "kubelet")
      # Define the base URL and version
      BASE_URL="https://kubernetesreleases.blob.core.windows.net/dalec-packages"
      VERSION="${KUBERNETES_VERSION}"
      VERSION=$${VERSION#v}
      OS_VERSION="ubuntu24.04"
      ARCH="amd64"
      
      # Function to find the latest available revision for a binary
      find_latest_revision() {
        local binary="$1"
        local version="$2"
        local os_version="$3"
        local arch="$4"
        
        # Try revisions from u10 down to u1 to find the latest available
        for i in $(seq 10 -1 1); do
          local test_url="$${BASE_URL}/$${binary}/$${version}/$${os_version}/$${arch}/$${binary}_$${version}-$${os_version}u$${i}_$${arch}.deb"
          if curl -s --head "$${test_url}" | grep -q "200 OK" 2>/dev/null; then
            echo "$${os_version}u$${i}"
            return 0
          fi
        done
        
        # Return empty string if no revision found
        echo ""
        return 1
      }
      
      for BINARY in "$${BINARIES[@]}"; do
        echo "* Finding latest revision for $${BINARY}..."
        if DEB_VERSION=$$(find_latest_revision "$${BINARY}" "$${VERSION}" "$${OS_VERSION}" "$${ARCH}"); then
          echo "* Using revision: $${DEB_VERSION}"
          echo "* downloading and extracting binary: $${BINARY} $${VERSION} with deb version $${DEB_VERSION}"
          DEB_FILE="/tmp/$${BINARY}_$${VERSION}-$${DEB_VERSION}_$${ARCH}.deb"
          DEB_URL="$${BASE_URL}/$${BINARY}/$${VERSION}/$${OS_VERSION}/$${ARCH}/$${BINARY}_$${VERSION}-$${DEB_VERSION}_$${ARCH}.deb"
          echo "Downloading from: $${DEB_URL}"
          curl -L --retry 10 --retry-delay 5 "$${DEB_URL}" --output "$${DEB_FILE}"
          # Extract just the binary from the deb package directly to /usr/bin
          echo "Extracting $${BINARY} binary to /usr/bin"
          dpkg-deb --fsys-tarfile "$${DEB_FILE}" | tar -xf - --strip-components=3 -C /usr/bin ./usr/bin/$${BINARY}
          chmod +x "/usr/bin/$${BINARY}"
          # Clean up the downloaded deb file
          rm -f "$${DEB_FILE}"
        else
          echo "* No deb package found for $${BINARY} $${VERSION}, skipping..."
        fi
      done
      systemctl restart kubelet
      echo "kubeadm version: $(kubeadm version -o=short)"
      echo "kubectl version: $(kubectl version --client=true)"
      echo "kubelet version: $(kubelet --version)"
    path: /tmp/replace-k8s-binaries.sh
    owner: "root:root"
    permissions: "0744"
- op: add
  path: /spec/template/spec/preKubeadmCommands/-
  value:
    bash -c /tmp/replace-k8s-binaries.sh
